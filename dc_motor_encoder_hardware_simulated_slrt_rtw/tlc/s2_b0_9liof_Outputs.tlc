%implements s2_b0_9liof_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T *lastU;
real_T lastTime;
real_T u1;
real_T u2;
%closefile localVarDecl
%assign tlcOutputsFcnOfS2B4 = OpaqueTLCBlockFcn("Outputs", 2, 4, 0, 2)
%assign tlcOutputsFcnOfS2B7 = OpaqueTLCBlockFcn("Outputs", 2, 7, 0, 2)
%assign tlcOutputsFcnOfS2B8 = OpaqueTLCBlockFcn("Outputs", 2, 8, 0, 2)
%assign tlcOutputsFcnOfS2B9 = OpaqueTLCBlockFcn("Outputs", 2, 9, 0, 2)
%assign tlcOutputsFcnOfS2B10 = OpaqueTLCBlockFcn("Outputs", 2, 10, 0, 2)
%assign tlcOutputsFcnOfS2B11 = OpaqueTLCBlockFcn("Outputs", 2, 11, 0, 2)
%assign tlcOutputsFcnOfS2B12 = OpaqueTLCBlockFcn("Outputs", 2, 12, 0, 2)
%assign tlcOutputsFcnOfS2B13 = OpaqueTLCBlockFcn("Outputs", 2, 13, 0, 2)
%assign tlcOutputsFcnOfS2B15 = OpaqueTLCBlockFcn("Outputs", 2, 15, 0, 2)
%<SLibCG_TrackEO(3)>\
%<SLibCG_TrackEO(2)>\
%<SLibCG_TrackEO(1)>\
%<SLibCG_TrackEO(0)>\
%<SLibGenerateExtModeOutput(system)>
/* Integrator: '<S5>/Integrator6' */
dc_motor_encoder_hardware_simulated_B.Integrator6 = dc_motor_encoder_hardware_simulated_X.Integrator6_CSTATE;
/* Product: '<S10>/Product2' incorporates:
 *  Constant: '<Root>/1 - Use simulated motor 0 - Use real motor'
 */
dc_motor_encoder_hardware_simulated_B.Product2 = dc_motor_encoder_hardware_simulated_B.Integrator6 * dc_motor_encoder_hardware_simulated_P.uUsesimulatedmotor0Userealmotor;
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
    /* ManualSwitch: '<Root>/Manual Switch' incorporates:
 *  Constant: '<Root>/Desired position  in degrees'
 *  Constant: '<Root>/Matlab_Input'
 */
    if (dc_motor_encoder_hardware_simulated_P.ManualSwitch_CurrentSetting == 1) {
        dc_motor_encoder_hardware_simulated_B.ManualSwitch = dc_motor_encoder_hardware_simulated_P.Desiredpositionindegrees_Value;
    } else {
        dc_motor_encoder_hardware_simulated_B.ManualSwitch = dc_motor_encoder_hardware_simulated_P.Matlab_Input_Value;
    }
    /* End of ManualSwitch: '<Root>/Manual Switch' */

    /* Gain: '<Root>/gain' */
    dc_motor_encoder_hardware_simulated_B.Setpoint = dc_motor_encoder_hardware_simulated_P.gain_Gain * dc_motor_encoder_hardware_simulated_B.ManualSwitch;
    /* Outport: '<Root>/setpoint_Out' */
    dc_motor_encoder_hardware_simulated_Y.setpoint_Out = dc_motor_encoder_hardware_simulated_B.Setpoint;
    /* Logic: '<S10>/complement the input1' incorporates:
 *  Constant: '<Root>/1 - Use simulated motor 0 - Use real motor'
 */
    dc_motor_encoder_hardware_simulated_B.complementtheinput1 = !(dc_motor_encoder_hardware_simulated_P.uUsesimulatedmotor0Userealmotor != 0.0);
%if !WHITE_SPACE(tlcOutputsFcnOfS2B4)
    /* S-Function (encquanserq8): '<S4>/Channel 0 of  Encoder Inputs ' */
%<tlcOutputsFcnOfS2B4>\
%endif
    /* Gain: '<S4>/angular_position =  [relative_count//COUNTS_PER_REV] *360 degrees' */
    dc_motor_encoder_hardware_simulated_B.angular_positionrelative_countC = dc_motor_encoder_hardware_simulated_P.angular_positionrelative_countC * dc_motor_encoder_hardware_simulated_B.Channel0ofEncoderInputs;
    /* Product: '<S10>/Product3' */
    dc_motor_encoder_hardware_simulated_B.Product3 = (real_T)dc_motor_encoder_hardware_simulated_B.complementtheinput1 * dc_motor_encoder_hardware_simulated_B.angular_positionrelative_countC;
}
/* Sum: '<S10>/Sum2' */
dc_motor_encoder_hardware_simulated_B.Sum2 = dc_motor_encoder_hardware_simulated_B.Product2 + dc_motor_encoder_hardware_simulated_B.Product3;
/* Sum: '<Root>/Sum1' */
dc_motor_encoder_hardware_simulated_B.ErrorSignal = dc_motor_encoder_hardware_simulated_B.Setpoint - dc_motor_encoder_hardware_simulated_B.Sum2;
/* Outport: '<Root>/errorSignal_Out' */
dc_motor_encoder_hardware_simulated_Y.errorSignal_Out = dc_motor_encoder_hardware_simulated_B.ErrorSignal;
/* Outport: '<Root>/motorPos_Out' */
dc_motor_encoder_hardware_simulated_Y.motorPos_Out = dc_motor_encoder_hardware_simulated_B.Sum2;
%if !WHITE_SPACE(tlcOutputsFcnOfS2B7)
/* S-Function (scblock): '<S1>/S-Function' */
%<tlcOutputsFcnOfS2B7>\
%endif
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS2B8)
    /* S-Function (scblock): '<S3>/S-Function' */
%<tlcOutputsFcnOfS2B8>\
%endif
}
%if !WHITE_SPACE(tlcOutputsFcnOfS2B9)
/* S-Function (scblock): '<S6>/S-Function' */
%<tlcOutputsFcnOfS2B9>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS2B10)
/* S-Function (scblock): '<S8>/S-Function' */
%<tlcOutputsFcnOfS2B10>\
%endif
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS2B11)
    /* S-Function (scblock): '<S9>/S-Function' */
%<tlcOutputsFcnOfS2B11>\
%endif
}
/* Derivative: '<Root>/Derivative1' */
if ((dc_motor_encoder_hardware_simulated_DW.TimeStampA >= %<(SLibCG_SE(LibGetT()))>) && (dc_motor_encoder_hardware_simulated_DW.TimeStampB >= %<(SLibCG_SE(LibGetT()))>)) {
    dc_motor_encoder_hardware_simulated_B.Derivative1 = 0.0;
} else {
    lastTime = dc_motor_encoder_hardware_simulated_DW.TimeStampA;
    lastU = &dc_motor_encoder_hardware_simulated_DW.LastUAtTimeA;
    if (dc_motor_encoder_hardware_simulated_DW.TimeStampA < dc_motor_encoder_hardware_simulated_DW.TimeStampB) {
        if (dc_motor_encoder_hardware_simulated_DW.TimeStampB < %<(SLibCG_SE(LibGetT()))>) {
            lastTime = dc_motor_encoder_hardware_simulated_DW.TimeStampB;
            lastU = &dc_motor_encoder_hardware_simulated_DW.LastUAtTimeB;
        }
    } else {
        if (dc_motor_encoder_hardware_simulated_DW.TimeStampA >= %<(SLibCG_SE(LibGetT()))>) {
            lastTime = dc_motor_encoder_hardware_simulated_DW.TimeStampB;
            lastU = &dc_motor_encoder_hardware_simulated_DW.LastUAtTimeB;
        }
    }
    lastTime = %<(SLibCG_SE(LibGetT()))> - lastTime;
    dc_motor_encoder_hardware_simulated_B.Derivative1 = (dc_motor_encoder_hardware_simulated_B.ErrorSignal - *lastU) / lastTime;
}
/* End of Derivative: '<Root>/Derivative1' */
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
    /* Constant: '<Root>/Estop ' */
    dc_motor_encoder_hardware_simulated_B.Estop = dc_motor_encoder_hardware_simulated_P.Estop_Value;
    /* Constant: '<Root>/Magnet_Control' */
    dc_motor_encoder_hardware_simulated_B.Magnet_Control = dc_motor_encoder_hardware_simulated_P.Magnet_Control_Value;
    /* Logic: '<S7>/complement the input' incorporates:
 *  Constant: '<Root>/1 - Use simulated motor 0 - Use real motor'
 */
    dc_motor_encoder_hardware_simulated_B.complementtheinput = !(dc_motor_encoder_hardware_simulated_P.uUsesimulatedmotor0Userealmotor != 0.0);
}
/* Gain: '<Root>/Gain' */
dc_motor_encoder_hardware_simulated_B.Gain[0] = dc_motor_encoder_hardware_simulated_P.Gain_Gain * dc_motor_encoder_hardware_simulated_B.Setpoint;
dc_motor_encoder_hardware_simulated_B.Gain[1] = dc_motor_encoder_hardware_simulated_P.Gain_Gain * dc_motor_encoder_hardware_simulated_B.Sum2;
dc_motor_encoder_hardware_simulated_B.Gain[2] = dc_motor_encoder_hardware_simulated_P.Gain_Gain * dc_motor_encoder_hardware_simulated_B.ErrorSignal;
/* Integrator: '<Root>/Integrator1' */
dc_motor_encoder_hardware_simulated_B.Integrator1 = dc_motor_encoder_hardware_simulated_X.Integrator1_CSTATE;
/* Gain: '<Root>/Kd' */
dc_motor_encoder_hardware_simulated_B.Kd = dc_motor_encoder_hardware_simulated_P.Kd_Gain * dc_motor_encoder_hardware_simulated_B.Derivative1;
/* Gain: '<Root>/Ki' */
dc_motor_encoder_hardware_simulated_B.Ki = dc_motor_encoder_hardware_simulated_P.Ki_Gain * dc_motor_encoder_hardware_simulated_B.Integrator1;
/* Gain: '<Root>/Kp' */
dc_motor_encoder_hardware_simulated_B.Kp = dc_motor_encoder_hardware_simulated_P.Kp_Gain * dc_motor_encoder_hardware_simulated_B.ErrorSignal;
/* Sum: '<Root>/Sum4' */
dc_motor_encoder_hardware_simulated_B.Sum4 = (dc_motor_encoder_hardware_simulated_B.Kp + dc_motor_encoder_hardware_simulated_B.Kd) + dc_motor_encoder_hardware_simulated_B.Ki;
/* Product: '<S7>/Product1' */
dc_motor_encoder_hardware_simulated_B.Product1 = (real_T)dc_motor_encoder_hardware_simulated_B.complementtheinput * dc_motor_encoder_hardware_simulated_B.Sum4;
/* Saturate: '<S4>/Saturation' */
lastTime = dc_motor_encoder_hardware_simulated_B.Product1;
u1 = dc_motor_encoder_hardware_simulated_P.Saturation_LowerSat;
u2 = dc_motor_encoder_hardware_simulated_P.Saturation_UpperSat;
if (lastTime > u2) {
    dc_motor_encoder_hardware_simulated_B.Saturation = u2;
} else if (lastTime < u1) {
    dc_motor_encoder_hardware_simulated_B.Saturation = u1;
} else {
    dc_motor_encoder_hardware_simulated_B.Saturation = lastTime;
}
/* End of Saturate: '<S4>/Saturation' */
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
    /* Constant: '<S4>/Power for Load Cell' */
    dc_motor_encoder_hardware_simulated_B.PowerforLoadCell = dc_motor_encoder_hardware_simulated_P.PowerforLoadCell_Value;
%if !WHITE_SPACE(tlcOutputsFcnOfS2B12)
    /* S-Function (daquanserq8): '<S4>/Channel 0 -Control signal to  motor through amplifier ' */
%<tlcOutputsFcnOfS2B12>\
%endif
}
/* Integrator: '<S5>/Integrator5' */
dc_motor_encoder_hardware_simulated_B.Integrator5 = dc_motor_encoder_hardware_simulated_X.Integrator5_CSTATE;
/* Gain: '<S5>/Back emf Ke1' */
dc_motor_encoder_hardware_simulated_B.BackemfKe1 = dc_motor_encoder_hardware_simulated_P.BackemfKe1_Gain * dc_motor_encoder_hardware_simulated_B.Integrator5;
/* Gain: '<S5>/Damping b1' */
dc_motor_encoder_hardware_simulated_B.Dampingb1 = dc_motor_encoder_hardware_simulated_P.Dampingb1_Gain * dc_motor_encoder_hardware_simulated_B.Integrator5;
/* Integrator: '<S5>/Integrator1' */
dc_motor_encoder_hardware_simulated_B.Integrator1_h = dc_motor_encoder_hardware_simulated_X.Integrator1_CSTATE_i;
/* Gain: '<S5>/Gain Kt2' */
dc_motor_encoder_hardware_simulated_B.GainKt2 = dc_motor_encoder_hardware_simulated_P.GainKt2_Gain * dc_motor_encoder_hardware_simulated_B.Integrator1_h;
/* Sum: '<S5>/Sum2' */
dc_motor_encoder_hardware_simulated_B.Sum2_e = dc_motor_encoder_hardware_simulated_B.GainKt2 - dc_motor_encoder_hardware_simulated_B.Dampingb1;
/* Gain: '<S5>/Gain Kt3' */
dc_motor_encoder_hardware_simulated_B.GainKt3 = dc_motor_encoder_hardware_simulated_P.GainKt3_Gain * dc_motor_encoder_hardware_simulated_B.Sum2_e;
/* Product: '<S7>/Product' incorporates:
 *  Constant: '<Root>/1 - Use simulated motor 0 - Use real motor'
 */
dc_motor_encoder_hardware_simulated_B.Product = dc_motor_encoder_hardware_simulated_B.Sum4 * dc_motor_encoder_hardware_simulated_P.uUsesimulatedmotor0Userealmotor;
/* Gain: '<S5>/Resistance R1' */
dc_motor_encoder_hardware_simulated_B.ResistanceR1 = dc_motor_encoder_hardware_simulated_P.ResistanceR1_Gain * dc_motor_encoder_hardware_simulated_B.Integrator1_h;
/* Sum: '<S5>/Sum1' */
dc_motor_encoder_hardware_simulated_B.Sum1 = (dc_motor_encoder_hardware_simulated_B.Product - dc_motor_encoder_hardware_simulated_B.BackemfKe1) - dc_motor_encoder_hardware_simulated_B.ResistanceR1;
/* Gain: '<S5>/Inductance' */
dc_motor_encoder_hardware_simulated_B.Inductance = dc_motor_encoder_hardware_simulated_P.Inductance_Gain * dc_motor_encoder_hardware_simulated_B.Sum1;
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS2B13)
    /* S-Function (adquanserq8): '<Root>/Q4 AD' */
%<tlcOutputsFcnOfS2B13>\
%endif
    /* Outport: '<Root>/Load Cell' */
    dc_motor_encoder_hardware_simulated_Y.LoadCell = dc_motor_encoder_hardware_simulated_B.Q4AD;
%if !WHITE_SPACE(tlcOutputsFcnOfS2B15)
    /* S-Function (scblock): '<S2>/S-Function' */
%<tlcOutputsFcnOfS2B15>\
%endif
}
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%endfunction
